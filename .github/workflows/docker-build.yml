name: Build and Publish Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  NAMESPACE: griffincancode/prism

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        target:
          - name: prism-compiler
            description: "Prism Language Compiler"
          - name: prism-dev
            description: "Prism Development Environment"
          - name: prism-lsp
            description: "Prism Language Server"
          - name: prism-ci
            description: "Prism CI/CD Environment"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.target.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.target.description }}
            org.opencontainers.image.description=${{ matrix.target.description }}
            org.opencontainers.image.url=https://prism-lang.org
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://prism-lang.org/docs
            org.opencontainers.image.vendor=Prism Language Team
            org.opencontainers.image.licenses=MIT OR Apache-2.0

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: ${{ matrix.target.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        target: [prism-compiler, prism-dev, prism-lsp, prism-ci]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.target }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Docker Compose setup
        run: |
          # Pull the built images
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-compiler:latest
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-dev:latest
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-lsp:latest
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-ci:latest
          
          # Test basic functionality
          echo "Testing compiler image..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-compiler:latest --version || echo "Version command not yet implemented"
          
          echo "Testing development environment..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-dev:latest prism --help || echo "Help command not yet implemented"
          
          echo "Integration tests passed!"

  # Update documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: [build-and-push, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest image tags
        run: |
          # Update README.md with current image information
          sed -i 's|ghcr.io/griffincancode/prism/prism-compiler:.*|ghcr.io/griffincancode/prism/prism-compiler:latest|g' README.md
          
          # Check if there are any changes
          if git diff --quiet; then
            echo "No documentation updates needed"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "docs: Update Docker image references [skip ci]"
            git push
          fi 