name: Publish Release to Package Managers

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v0.1.0)'
        required: true
        type: string
      publish_crates:
        description: 'Publish to crates.io'
        required: true
        type: boolean
        default: true
      publish_npm:
        description: 'Publish to npm'
        required: true
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  NAMESPACE: griffincancode/prism

jobs:
  # Extract version and prepare release
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION}" >> $GITHUB_OUTPUT

  # Build and extract binaries from Docker images
  extract-binaries:
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          # Note: Docker can't build macOS binaries, we'll need cross-compilation for those
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and extract binaries
        run: |
          PLATFORM="${{ matrix.platform }}"
          OS_ARCH="${PLATFORM//\//-}"
          
          # Create extraction directory
          mkdir -p "dist/${OS_ARCH}"
          
          # Pull the specific platform image
          docker pull --platform="${PLATFORM}" ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-compiler:${{ needs.prepare-release.outputs.version_tag }}
          
          # Extract binary
          CONTAINER_ID=$(docker create --platform="${PLATFORM}" ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/prism-compiler:${{ needs.prepare-release.outputs.version_tag }})
          docker cp "${CONTAINER_ID}:/usr/local/bin/prism" "dist/${OS_ARCH}/"
          docker rm "${CONTAINER_ID}"
          
          # Make executable and create archive
          chmod +x "dist/${OS_ARCH}/prism"
          tar -czf "dist/prism-${{ needs.prepare-release.outputs.version_tag }}-${OS_ARCH}.tar.gz" -C "dist/${OS_ARCH}" prism

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: dist/*.tar.gz

  # Cross-compile for macOS (since Docker can't build macOS binaries)
  build-macos:
    runs-on: macos-latest
    needs: prepare-release
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build for macOS
        run: |
          cargo build --release --target ${{ matrix.target }} --bin prism
          
          # Create distribution directory
          TARGET_DIR="dist/${{ matrix.target }}"
          mkdir -p "${TARGET_DIR}"
          
          # Copy binary
          cp "target/${{ matrix.target }}/release/prism" "${TARGET_DIR}/"
          
          # Create archive
          tar -czf "dist/prism-${{ needs.prepare-release.outputs.version_tag }}-${{ matrix.target }}.tar.gz" -C "${TARGET_DIR}" prism

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: dist/*.tar.gz

  # Publish to crates.io
  publish-crates:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: ${{ github.event.inputs.publish_crates == 'true' || github.event_name == 'release' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          crates=(
            "prism-common"
            "prism-ast" 
            "prism-lexer"
            "prism-parser"
            "prism-semantic"
            "prism-effects"
            "prism-pir"
            "prism-codegen"
            "prism-syntax"
            "prism-runtime"
            "prism-compiler"
            "prism-cli"
          )
          
          for crate in "${crates[@]}"; do
            if [ -d "crates/$crate" ]; then
              echo "Publishing $crate to crates.io"
              (cd "crates/$crate" && cargo publish --token "$CARGO_REGISTRY_TOKEN")
              
              # Wait between publishes to avoid rate limiting
              sleep 30
            else
              echo "Crate $crate not found, skipping"
            fi
          done

  # Generate package manager files
  generate-packages:
    runs-on: ubuntu-latest
    needs: [prepare-release, extract-binaries, build-macos]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: dist/

      - name: Generate Homebrew formula
        run: |
          mkdir -p dist/homebrew
          
          # Calculate SHA256 checksums
          DARWIN_AMD64_SHA=$(shasum -a 256 "dist/prism-${{ needs.prepare-release.outputs.version_tag }}-x86_64-apple-darwin.tar.gz" | cut -d' ' -f1)
          DARWIN_ARM64_SHA=$(shasum -a 256 "dist/prism-${{ needs.prepare-release.outputs.version_tag }}-aarch64-apple-darwin.tar.gz" | cut -d' ' -f1)
          
          cat > dist/homebrew/prism.rb << EOF
          class Prism < Formula
            desc "AI-first programming language with semantic types and capability-based security"
            homepage "https://prism-lang.org"
            license "MIT OR Apache-2.0"
            version "${{ needs.prepare-release.outputs.version }}"
          
            if Hardware::CPU.intel?
              url "https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.version_tag }}/prism-${{ needs.prepare-release.outputs.version_tag }}-x86_64-apple-darwin.tar.gz"
              sha256 "${DARWIN_AMD64_SHA}"
            elsif Hardware::CPU.arm?
              url "https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.version_tag }}/prism-${{ needs.prepare-release.outputs.version_tag }}-aarch64-apple-darwin.tar.gz"
              sha256 "${DARWIN_ARM64_SHA}"
            end
          
            def install
              bin.install "prism"
            end
          
            test do
              system "#{bin}/prism", "--version"
            end
          end
          EOF

      - name: Generate npm package
        run: |
          mkdir -p dist/npm/bin
          
          # Copy binaries with npm naming convention
          cp dist/prism-*-linux-amd64.tar.gz dist/npm/ || true
          cp dist/prism-*-linux-arm64.tar.gz dist/npm/ || true
          cp dist/prism-*-x86_64-apple-darwin.tar.gz dist/npm/ || true
          cp dist/prism-*-aarch64-apple-darwin.tar.gz dist/npm/ || true
          
          # Extract binaries for npm package
          cd dist/npm
          for archive in *.tar.gz; do
            if [[ "$archive" == *"linux-amd64"* ]]; then
              tar -xzf "$archive" && mv prism bin/prism-linux-x64
            elif [[ "$archive" == *"linux-arm64"* ]]; then
              tar -xzf "$archive" && mv prism bin/prism-linux-arm64
            elif [[ "$archive" == *"x86_64-apple-darwin"* ]]; then
              tar -xzf "$archive" && mv prism bin/prism-darwin-x64
            elif [[ "$archive" == *"aarch64-apple-darwin"* ]]; then
              tar -xzf "$archive" && mv prism bin/prism-darwin-arm64
            fi
            rm "$archive"
          done
          cd ../..
          
          # Generate package.json
          cat > dist/npm/package.json << EOF
          {
            "name": "@prism-lang/prism",
            "version": "${{ needs.prepare-release.outputs.version }}",
            "description": "AI-first programming language with semantic types and capability-based security",
            "keywords": ["compiler", "language", "ai", "semantic-types", "capabilities"],
            "homepage": "https://prism-lang.org",
            "repository": {
              "type": "git",
              "url": "https://github.com/${{ github.repository }}.git"
            },
            "license": "MIT OR Apache-2.0",
            "author": "Prism Language Team",
            "bin": {
              "prism": "./bin/prism.js"
            },
            "files": [
              "bin/",
              "README.md"
            ],
            "engines": {
              "node": ">=16"
            },
            "os": ["linux", "darwin"],
            "cpu": ["x64", "arm64"]
          }
          EOF
          
          # Generate launcher script
          cat > dist/npm/bin/prism.js << 'EOF'
          #!/usr/bin/env node
          const os = require('os');
          const path = require('path');
          const { spawn } = require('child_process');
          
          function getBinaryPath() {
              const platform = os.platform();
              const arch = os.arch();
              
              let binaryName;
              if (platform === 'linux') {
                  binaryName = arch === 'arm64' ? 'prism-linux-arm64' : 'prism-linux-x64';
              } else if (platform === 'darwin') {
                  binaryName = arch === 'arm64' ? 'prism-darwin-arm64' : 'prism-darwin-x64';
              } else {
                  console.error(`Unsupported platform: ${platform}-${arch}`);
                  process.exit(1);
              }
              
              return path.join(__dirname, binaryName);
          }
          
          const binaryPath = getBinaryPath();
          const child = spawn(binaryPath, process.argv.slice(2), { stdio: 'inherit' });
          child.on('close', (code) => process.exit(code));
          EOF
          
          chmod +x dist/npm/bin/prism.js
          cp README.md dist/npm/

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            dist/homebrew/
            dist/npm/

  # Publish to npm
  publish-npm:
    runs-on: ubuntu-latest
    needs: [prepare-release, generate-packages]
    if: ${{ github.event.inputs.publish_npm == 'true' || github.event_name == 'release' }}
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd dist/npm
          npm publish --access public

  # Create GitHub Release with all assets
  create-github-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, extract-binaries, build-macos, generate-packages]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version_tag }}
          name: Prism ${{ needs.prepare-release.outputs.version_tag }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version_tag, '-') }}
          files: |
            dist/*.tar.gz
            dist/*.deb
          body: |
            # Prism ${{ needs.prepare-release.outputs.version_tag }} Release
            
            ## Installation Options
            
            ### Docker (Recommended)
            ```bash
            docker run --rm -v $(pwd):/workspace ghcr.io/${{ env.NAMESPACE }}/prism-compiler:${{ needs.prepare-release.outputs.version_tag }}
            ```
            
            ### Homebrew (macOS/Linux)
            ```bash
            brew install GriffinCanCode/tap/prism
            ```
            
            ### npm (Node.js projects)
            ```bash
            npm install -g @prism-lang/prism
            ```
            
            ### crates.io (Rust projects)
            ```bash
            cargo install prism-cli
            ```
            
            ## Docker Images
            
            - `ghcr.io/${{ env.NAMESPACE }}/prism-compiler:${{ needs.prepare-release.outputs.version_tag }}`
            - `ghcr.io/${{ env.NAMESPACE }}/prism-dev:${{ needs.prepare-release.outputs.version_tag }}`
            - `ghcr.io/${{ env.NAMESPACE }}/prism-lsp:${{ needs.prepare-release.outputs.version_tag }}`
            - `ghcr.io/${{ env.NAMESPACE }}/prism-ci:${{ needs.prepare-release.outputs.version_tag }}` 