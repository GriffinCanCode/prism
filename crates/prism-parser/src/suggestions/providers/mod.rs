//! Suggestion Providers
//!
//! This module contains specialized suggestion providers that generate suggestions
//! based on different types of analysis (syntax, semantic, business rules, AI).
//! Each provider maintains SoC by focusing on one domain of suggestions.

pub mod syntax;
pub mod semantic;
pub mod business;

use super::{
    context::SuggestionContext, 
    ContextualSuggestion, 
    SuggestionError, 
    SuggestionResult
};
use crate::core::error::ParseError;

// Re-export provider types
pub use syntax::SyntaxSuggestionProvider;
pub use semantic::SemanticSuggestionProvider;
pub use business::BusinessSuggestionProvider;

/// Container for all suggestion providers
pub struct SuggestionProviders {
    /// Syntax-level suggestion provider
    pub syntax_provider: SyntaxSuggestionProvider,
    
    /// Semantic-level suggestion provider
    pub semantic_provider: SemanticSuggestionProvider,
    
    /// Business rule suggestion provider
    pub business_provider: BusinessSuggestionProvider,
}

impl SuggestionProviders {
    /// Create new suggestion providers
    pub fn new(config: &super::engine::SuggestionEngineConfig) -> SuggestionResult<Self> {
        Ok(Self {
            syntax_provider: SyntaxSuggestionProvider::new(config)?,
            semantic_provider: SemanticSuggestionProvider::new(config)?,
            business_provider: BusinessSuggestionProvider::new(config)?,
        })
    }
    
    /// Get statistics from all providers
    pub fn get_statistics(&self) -> super::engine::ProviderStatistics {
        super::engine::ProviderStatistics {
            syntax_suggestions_generated: self.syntax_provider.suggestions_generated(),
            semantic_suggestions_generated: self.semantic_provider.suggestions_generated(),
            business_suggestions_generated: self.business_provider.suggestions_generated(),
        }
    }
}

/// Trait for suggestion providers
pub trait SuggestionProvider {
    /// Generate suggestions for an error given context
    fn generate_suggestions(
        &mut self,
        error: &ParseError,
        context: &SuggestionContext,
    ) -> SuggestionResult<Option<Vec<ContextualSuggestion>>>;
    
    /// Get the number of suggestions generated by this provider
    fn suggestions_generated(&self) -> usize;
    
    /// Get the provider's name for debugging
    fn provider_name(&self) -> &'static str;
} 