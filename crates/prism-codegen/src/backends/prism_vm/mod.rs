//! Prism VM Code Generation Backend
//!
//! This module implements the Prism VM backend for code generation,
//! compiling PIR (Prism Intermediate Representation) to Prism bytecode.
//!
//! ## Design Principles
//!
//! 1. **Semantic Preservation**: All semantic information from PIR is preserved in bytecode
//! 2. **Capability Aware**: Capability requirements are encoded in bytecode
//! 3. **Effect Tracking**: Effects are explicitly represented in bytecode instructions
//! 4. **Debugging Support**: Rich debugging information is generated
//! 5. **Optimization Ready**: Bytecode is structured for JIT optimization

pub mod core;
pub mod compiler;
pub mod optimization;
pub mod validation;

// Re-export main types
pub use core::PrismVMBackend;
pub use compiler::{PIRToBytecodeCompiler, CompilerConfig};
pub use optimization::{BytecodeOptimizer, OptimizationConfig};
pub use validation::{BytecodeValidator, ValidationConfig};

use crate::backends::{
    CompilationTarget, CompilationContext, CodeGenBackend, CodeArtifact,
    CodeGenConfig, CodeGenStats, BackendCapabilities, AIMetadataLevel,
    PrismIR,
};
use crate::CodeGenResult;
use prism_vm::{PrismBytecode, VMResult};
use serde::{Deserialize, Serialize};
use thiserror::Error;

/// VM backend specific error types
#[derive(Error, Debug)]
pub enum VMBackendError {
    /// Compilation error
    #[error("Compilation error: {message}")]
    CompilationError { message: String },

    /// Optimization error
    #[error("Optimization error: {message}")]
    OptimizationError { message: String },

    /// Validation error
    #[error("Validation error: {message}")]
    ValidationError { message: String },

    /// Bytecode error
    #[error("Bytecode error: {message}")]
    BytecodeError { message: String },

    /// Configuration error
    #[error("Configuration error: {message}")]
    ConfigurationError { message: String },
}

/// Result type for VM backend operations
pub type VMBackendResult<T> = Result<T, VMBackendError>;

/// Prism VM backend configuration
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PrismVMBackendConfig {
    /// Optimization level (0-3)
    pub optimization_level: u8,
    /// Generate debug information
    pub debug_info: bool,
    /// Include AI metadata in bytecode
    pub ai_metadata: bool,
    /// Validate generated bytecode
    pub validate_bytecode: bool,
    /// Compiler configuration
    pub compiler_config: CompilerConfig,
    /// Optimization configuration
    pub optimization_config: OptimizationConfig,
    /// Validation configuration
    pub validation_config: ValidationConfig,
}

impl Default for PrismVMBackendConfig {
    fn default() -> Self {
        Self {
            optimization_level: 2,
            debug_info: true,
            ai_metadata: true,
            validate_bytecode: true,
            compiler_config: CompilerConfig::default(),
            optimization_config: OptimizationConfig::default(),
            validation_config: ValidationConfig::default(),
        }
    }
}

impl PrismVMBackendConfig {
    /// Create configuration from CodeGenConfig
    pub fn from_codegen_config(config: &CodeGenConfig) -> Self {
        Self {
            optimization_level: config.optimization_level,
            debug_info: config.debug_info,
            ai_metadata: config.ai_metadata_level != AIMetadataLevel::None,
            validate_bytecode: true,
            compiler_config: CompilerConfig {
                preserve_semantics: true,
                generate_type_info: true,
                generate_effect_info: true,
                generate_capability_info: true,
                optimization_level: config.optimization_level,
            },
            optimization_config: OptimizationConfig {
                enabled: config.optimization_level > 0,
                level: config.optimization_level,
                constant_folding: true,
                dead_code_elimination: config.optimization_level >= 2,
                instruction_combining: config.optimization_level >= 2,
                jump_optimization: config.optimization_level >= 3,
            },
            validation_config: ValidationConfig {
                enabled: true,
                validate_instructions: true,
                validate_types: true,
                validate_capabilities: true,
                validate_effects: true,
                validate_stack: true,
            },
        }
    }
} 